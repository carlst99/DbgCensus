import{_ as s,c as a,o as t,af as n}from"./chunks/framework.B6SQUEf8.js";const p=JSON.parse('{"title":"Core Information","description":"","frontmatter":{},"headers":[],"relativePath":"core-info.md","filePath":"core-info.md"}'),r={name:"core-info.md"};function i(o,e,l,h,u,c){return t(),a("div",null,e[0]||(e[0]=[n(`<h1 id="core-information" tabindex="-1">Core Information <a class="header-anchor" href="#core-information" aria-label="Permalink to “Core Information”">​</a></h1><h2 id="packages" tabindex="-1">Packages <a class="header-anchor" href="#packages" aria-label="Permalink to “Packages”">​</a></h2><p><a href="https://www.nuget.org/packages/DbgCensus.Core" target="_blank" rel="noreferrer"><img src="https://img.shields.io/nuget/v/DbgCensus.Core?label=DbgCensus.Core" alt="Nuget | DbgCensus.Core"></a> Core data types and utilities.</p><p><a href="https://www.nuget.org/packages/DbgCensus.Rest" target="_blank" rel="noreferrer"><img src="https://img.shields.io/nuget/v/DbgCensus.Rest?label=DbgCensus.Rest" alt="Nuget | DbgCensus.Rest"></a> Services for interacting with the query endpoints.</p><p><a href="https://www.nuget.org/packages/DbgCensus.EventStream" target="_blank" rel="noreferrer"><img src="https://img.shields.io/nuget/v/DbgCensus.EventStream?label=DbgCensus.EventStream" alt="Nuget | DbgCensus.EventStream"></a> Base services for interacting with the event streaming API.</p><p><a href="https://www.nuget.org/packages/DbgCensus.EventStream.EventHandlers" target="_blank" rel="noreferrer"><img src="https://img.shields.io/nuget/v/DbgCensus.EventStream.EventHandlers?label=DbgCensus.EventStream.EventHandlers" alt="Nuget | DbgCensus.EventStream.EventHandlers"></a> An abstraction of <code>DbgCensus.EventStream</code> providing an asynchronous and decoupled event handling model.</p><h2 id="getting-started-with-census" tabindex="-1">Getting Started with Census <a class="header-anchor" href="#getting-started-with-census" aria-label="Permalink to “Getting Started with Census”">​</a></h2><p>Before you do anything, you should consider getting a custom <em>Census Service ID</em>. The process is free and it generally only takes a few hours to hear back about your registration, <a href="https://census.daybreakgames.com/#devSignup" target="_blank" rel="noreferrer">which you can do here</a>.</p><p>Note that you can use the <code>example</code> service ID, however you will be rate-limited to 10 requests per minute, per client IP address.</p><p>You will also need to have a good understanding of how the Census API works. I highly recommend making your way through these excellent official/community resources:</p><ul><li><a href="https://census.daybreakgames.com" target="_blank" rel="noreferrer">The official Census API documentation.</a></li><li><a href="https://github.com/leonhard-s/auraxium/wiki/Census-API-Primer" target="_blank" rel="noreferrer">Leonhard&#39;s Census API Primer.</a></li><li><a href="https://github.com/cooltrain7/Planetside-2-API-Tracker" target="_blank" rel="noreferrer">The community API issue tracker/info repository.</a></li><li><a href="https://ps2-api-docs.readthedocs.io/en/latest/openapi.html" target="_blank" rel="noreferrer">Leonhard&#39;s unofficial docs for PlanetSide 2 endpoints.</a></li></ul><h2 id="core-library-components" tabindex="-1">Core Library Components <a class="header-anchor" href="#core-library-components" aria-label="Permalink to “Core Library Components”">​</a></h2><p>The <em>Core</em> library contains common types and extensions. Of these, it is likely you will find the Census types useful (<code>DbgCensus.Core.Objects</code>). There are:</p><ul><li>Enumerations of the faction, world, zone and metagame (definition and state) IDs that Census uses.</li><li>An <code>Optional&lt;T&gt;</code> structure w/ relevant JSON converters that you can use to represent optional Census fields in your models.</li><li>A <code>ZoneID</code> struct that represents Census&#39; special zone ID format - <a href="https://github.com/cooltrain7/Planetside-2-API-Tracker/wiki/Tutorial:-Zone-IDs" target="_blank" rel="noreferrer">see here</a> for more info. JSON converters are registered by default for this type, so you can use it anywhere that you would normally use an integer zone ID in your models.</li><li>A <code>GlobalizedString</code> structure that represents Census&#39; globalized string fields:<div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes one-dark-pro one-light" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;name&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: {</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">    &quot;de&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;Spawn-Leuchte&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">    &quot;en&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;Spawn Beacon&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#FFFFFF;--shiki-light:white;">    ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p>There are also converters, extensions and naming policies for <code>System.Text.Json</code> that you may find useful should you decide to perform your own JSON deserialization.</p>`,15)]))}const g=s(r,[["render",i]]);export{p as __pageData,g as default};
